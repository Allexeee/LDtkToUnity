using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.Tilemaps;

namespace LDtkUnity
{
    /// <summary>
    /// Stores the autogenerated sprites for the tiles, sprites for level backgrounds, and all TileBases for the Int Grid values, and for the LDtk tiles.
    /// </summary>
    [HelpURL(LDtkHelpURL.SCRIPTABLE_OBJECT_TILEMAP_COLLECTION)]
    public class LDtkArtifactAssets : ScriptableObject
    {
        public const string PROP_SPRITE_LIST = nameof(_cachedSprites);
        public const string PROP_TILE_LIST = nameof(_cachedTiles);

        [SerializeField] private List<Sprite> _cachedSprites = new List<Sprite>();
        [SerializeField] private List<TileBase> _cachedTiles = new List<TileBase>();
        
        public void TryAddSprite(Sprite sprite) => TryAddItem(sprite, _cachedSprites);
        public void TryAddTile(TileBase tile) => TryAddItem(tile, _cachedTiles);
        private void TryAddItem<T>(T item, List<T> list) where T : Object
        {
            if (item == null)
            {
                Debug.LogError("Tried adding an item what was null");
                return;
            }
            
            string itemName = item.name;
            if (list.Select(p => p.name).Any(p => p == itemName))
            {
                return;
            }
            list.Add(item);
        }
        
        public Sprite GetSpriteByName(string spriteName) => GetItem(spriteName, _cachedSprites);
        public TileBase GetTileByName(string tileName) => GetItem(tileName, _cachedTiles);
        private T GetItem<T>(string assetName, IReadOnlyCollection<T> array) where T : Object
        {
            if (array.NullOrEmpty())
            {
                return null;
            }
            
            T asset = array.FirstOrDefault(p => p.name.Equals(assetName));
            if (asset != null)
            {
                return asset;
            }
            
            Debug.LogError($"No asset named \"{assetName}\" found in \"{name}\"", this);
            return null;
        }
    }
}