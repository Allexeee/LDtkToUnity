// ReSharper disable InconsistentNaming

using LDtkUnity.Runtime.Data.Definition;
using LDtkUnity.Runtime.Tools;
using Newtonsoft.Json;
using UnityEngine;

namespace LDtkUnity.Runtime.Data.Level
{
    //https://github.com/deepnight/ldtk/blob/master/JSON_DOC.md#11-layer-instance
    public struct LDtkDataLayer
    {
        /// <summary>
        /// Grid-based height
        /// </summary>
        [JsonProperty] public int __cHei { get; private set; }
        
        /// <summary>
        /// Grid-based width
        /// </summary>
        [JsonProperty] public int __cWid { get; private set; }
        
        /// <summary>
        /// Grid size
        /// </summary>
        [JsonProperty] public int __gridSize { get; private set; }
        
        /// <summary>
        /// Unique String identifier
        /// </summary>
        [JsonProperty] public string __identifier { get; private set; }
        
        /// <summary>
        /// Layer opacity as Float [0-1]
        /// </summary>
        [JsonProperty] public float __opacity { get; private set; }

        /// <summary>
        /// Total layer X pixel offset, including both instance and definition offsets.
        /// </summary>
        [JsonProperty] public int __pxTotalOffsetX { get; private set; }
        
        /// <summary>
        /// Total layer Y pixel offset, including both instance and definition offsets.
        /// </summary>
        [JsonProperty] public int __pxTotalOffsetY { get; private set; }
        
        /// <summary>
        /// Layer type (possible values: IntGrid, Entities, Tiles or AutoLayer)
        /// </summary>
        [JsonProperty] public string __type { get; private set; } 
        
        /// <summary>
        /// Only Auto-layers.
        /// An array containing all tiles generated by Auto-layer rules. The array is already sorted in display order (ie. 1st tile is beneath 2nd, which is beneath 3rd etc.)
        /// </summary>
        [JsonProperty] public LDtkDataTile[] autoLayerTiles { get; private set; }
        
        /// <summary>
        /// Only Entity layers
        /// </summary>
        [JsonProperty] public LDtkDataEntity[] entityInstances { get; private set; }
        
        /// <summary>
        /// Only Tile layers
        /// </summary>
        [JsonProperty] public LDtkDataTile[] gridTiles { get; private set; }
        
        /// <summary>
        /// Only IntGrid layers
        /// </summary>
        [JsonProperty] public LDtkDataIntGridValue[] intGrid { get; private set; }

        /// <summary>
        /// Reference the Layer definition UID
        /// </summary>
        [JsonProperty] public int layerDefUid { get; private set; }
        
        /// <summary>
        /// Reference to the UID of the level containing this layer instance
        /// </summary>
        [JsonProperty] public int levelId { get; private set; } 
        
        /// <summary>
        /// X offset in pixels to render this layer, usually 0 (IMPORTANT: this should be added to the LayerDef optional offset)
        /// </summary>
        [JsonProperty] public int pxOffsetX { get; private set; }
        
        /// <summary>
        /// Y offset in pixels to render this layer, usually 0 (IMPORTANT: this should be added to the LayerDef optional offset)
        /// </summary>
        [JsonProperty] public int pxOffsetY { get; private set; }
        
        /// <summary>
        /// Only Auto-layers.
        /// Random seed used for Auto-Layers rendering
        /// </summary>
        [JsonProperty] public int seed { get; private set; }
        
        
        public bool IsIntGridLayer=> !intGrid.NullOrEmpty();
        public bool IsAutoTilesLayer => !autoLayerTiles.NullOrEmpty();
        public bool IsGridTilesLayer => !gridTiles.NullOrEmpty();
        public bool IsEntityInstancesLayer => !entityInstances.NullOrEmpty();

        public LDtkDefinitionLayer Definition => LDtkUidDatabase.GetLayerDefinition(layerDefUid);
        public LDtkDataLevel LevelReference => LDtkUidDatabase.GetLevelData(levelId);
        
        public Bounds LayerUnitBounds
        {
            get
            {
                Vector2Int lvlUnitSize = new Vector2Int(__cWid, __cHei) * __gridSize;
                return new Bounds((Vector2)lvlUnitSize / 2, (Vector3Int)lvlUnitSize);
            }
        }
    }
}