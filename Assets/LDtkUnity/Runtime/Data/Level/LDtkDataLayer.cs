// ReSharper disable InconsistentNaming

using LDtkUnity.Runtime.Data.Definition;
using LDtkUnity.Runtime.Tools;

namespace LDtkUnity.Runtime.Data.Level
{
    //https://github.com/deepnight/ldtk/blob/master/JSON_DOC.md#11-layer-instance
    public struct LDtkDataLayer
    {
        /// <summary>
        /// Grid-based height
        /// </summary>
        public int __cHei;
        
        /// <summary>
        /// Grid-based width
        /// </summary>
        public int __cWid;
        
        /// <summary>
        /// Grid size
        /// </summary>
        public int __gridSize;
        
        /// <summary>
        /// Unique String identifier
        /// </summary>
        public string __identifier;
        
        /// <summary>
        /// Layer opacity as Float [0-1]
        /// </summary>
        public float __opacity;

        /// <summary>
        /// Total layer X pixel offset, including both instance and definition offsets.
        /// </summary>
        public int __pxTotalOffsetX;
        
        /// <summary>
        /// Total layer Y pixel offset, including both instance and definition offsets.
        /// </summary>
        public int __pxTotalOffsetY;
        
        /// <summary>
        /// Layer type (possible values: IntGrid, Entities, Tiles or AutoLayer)
        /// </summary>
        public string __type; 
        
        /// <summary>
        /// Only Auto-layers.
        /// An array containing all tiles generated by Auto-layer rules. The array is already sorted in display order (ie. 1st tile is beneath 2nd, which is beneath 3rd etc.)
        /// </summary>
        public LDtkDataTile[] autoLayerTiles;
        
        /// <summary>
        /// Only Entity layers
        /// </summary>
        public LDtkDataEntity[] entityInstances;
        
        /// <summary>
        /// Only Tile layers
        /// </summary>
        public LDtkDataTile[] gridTiles;
        
        /// <summary>
        /// Only IntGrid layers
        /// </summary>
        public LDtkDataIntGrid[] intGrid;

        /// <summary>
        /// Reference the Layer definition UID
        /// </summary>
        public int layerDefUid;
        
        /// <summary>
        /// Reference to the UID of the level containing this layer instance
        /// </summary>
        public int levelId; 
        
        /// <summary>
        /// X offset in pixels to render this layer, usually 0 (IMPORTANT: this should be added to the LayerDef optional offset)
        /// </summary>
        public int pxOffsetX;
        
        /// <summary>
        /// Y offset in pixels to render this layer, usually 0 (IMPORTANT: this should be added to the LayerDef optional offset)
        /// </summary>
        public int pxOffsetY;
        
        /// <summary>
        /// Only Auto-layers.
        /// Random seed used for Auto-Layers rendering
        /// </summary>
        public int seed;
        
        
        public bool IsIntGridLayer=> !intGrid.NullOrEmpty();
        public bool IsAutoTilesLayer => !autoLayerTiles.NullOrEmpty();
        public bool IsGridTilesLayer => !gridTiles.NullOrEmpty();
        public bool IsEntityInstancesLayer => !entityInstances.NullOrEmpty();
        
    }
}